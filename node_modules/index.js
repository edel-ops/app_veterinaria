const http = require('http');
const url = require('url');
// dependecias
const StringDecoder = require('string_decoder').StringDecoder;


const callbackDelServidor = (req, res) => {

  // 1 obtener la url desde el objeto request (req)
  const urlActual = req.url;
  const urlParseada = url.parse(urlActual, true);
  //console.log({ urlActual, urlParseada });


  // 2 obtener la ruta
  const ruta = urlParseada.pathname;

  // 3 quitar slash / a las rutas
  const rutaLimpia = ruta.replace(/^\/+|\/+$/g, '');

  // 3.1 obtener el metodo http
  const metodo = req.method.toLowerCase();
  //console.log('metodo http:', metodo);

  // 3.2 obtener variables del query url
  const { query = {} } = urlParseada;
  //console.log('variables en el query:', { query });

  // 3.3 obtener los headers
  const { headers = {} } = req;
  //console.log('headers:', headers);

  // 3.4 obtener payload, en el caso de haber uno
  const decoder = new StringDecoder('utf-8');
  let buffer = '';

  // 3.4.1 ir acumulando la data cuando el request reciba un payload
  req.on('data', (data) => {
    buffer += decoder.write(data);
  });

  // 3.4.2 terminar de acumular datos y decirle al decoder que finalice
  req.on('end', () => {
    buffer += decoder.end();

    // 3.5 ordenar la data del request
    const data = {
      ruta: rutaLimpia,
      query,
      metodo,
      headers,
      payload: buffer
    };

    // 3.6 elegir el manejador de la respuesta (handler) dependiendo de la ruta y asignarle la funcion que el enrutador tiene
    let handler;
    
    if (rutaLimpia && enrutador[rutaLimpia]) {
      handler = enrutador[rutaLimpia];
    } else {
      handler = enrutador.noEncontrado;
    }
    
    // 4 ejecutar handler (manejador) para enviar la respuesta
    if (typeof handler === 'function') {
      handler(data, (statusCode = 200, mensaje) => {
        const respuesta = JSON.stringify(mensaje);
        res.writeHead(statusCode);
        // linea donde realmente se envia la respuesta al cliente
        res.end(respuesta);
      })
    }

  });

};

const enrutador = {
  ruta: (data, callback) => {
    callback(200, { mensaje: 'Este ejemplo es /ruta' });
  },

  usuarios: (data, callback) => {
    callback(200, [{ nombre: 'usuario1' }, { nombre: 'usuario2' }]);
  },

  noEncontrado: (data, callback) => {
    callback(404, { mensaje: 'No encontrado' });
  }
};

const server = http.createServer(callbackDelServidor);

server.listen(5000, () => {
  console.log('el servidor esta escuchando peticiones en http://localhost:5000/');
});